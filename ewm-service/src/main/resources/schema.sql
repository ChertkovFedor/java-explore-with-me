Drop table if exists USERS cascade;
Drop table if exists CATEGORIES cascade;
Drop table if exists EVENTS cascade;
Drop table if exists REQUESTS cascade;
Drop table if exists COMPILATIONS cascade;
Drop table if exists COMPILATION_EVENTS cascade;

Create table if not exists USERS
(
    ID    bigint generated by default as identity not null,
    NAME  varchar(250)                            not null,
    EMAIL varchar(254)                            not null,
    constraint USERS_PK_ID primary key (ID),
    constraint EMAIL_UQ unique (EMAIL)
);

Create table if not exists CATEGORIES
(
    ID   bigint generated by default as identity not null,
    NAME varchar(250)                            not null,
    constraint CATEGORIES_PK_ID primary key (ID),
    constraint NAME_UQ unique (NAME)
);

Create table if not exists EVENTS
(
    ID                 bigint generated by default as identity not null,
    TITLE              varchar(120),
    CATEGORY_ID        bigint,
    CREATED_ON         timestamp without time zone,
    DESCRIPTION        varchar(7000),
    EVENT_DATE         timestamp without time zone             not null,
    ANNOTATION         varchar(2000),
    INITIATOR_ID       bigint,
    PAID               boolean,
    PARTICIPANT_LIMIT  bigint,
    LON                float,
    LAT                float,
    PUBLISHED_ON       timestamp without time zone,
    REQUEST_MODERATION boolean,
    STATE              varchar(50),
    constraint EVENTS_PK_ID primary key (ID),
    constraint EVENTS_FK_CATEGORY foreign key (CATEGORY_ID) references CATEGORIES,
    constraint EVENTS_FK_USERS foreign key (INITIATOR_ID) references USERS
);

Create table if not exists REQUESTS
(
    ID           bigint generated by default as identity not null,
    CREATED      timestamp without time zone,
    REQUESTER_ID bigint,
    EVENT_ID     bigint,
    STATUS       varchar(50),
    constraint REQUESTS_PK_ID primary key (ID),
    constraint REQUESTS_FK_USERS foreign key (REQUESTER_ID) references USERS,
    constraint REQUESTS_FK_EVENTS foreign key (EVENT_ID) references EVENTS
);

Create table if not exists COMPILATIONS
(
    ID     bigint generated by default as identity not null,
    TITLE  varchar(100)                            not null,
    PINNED boolean,
    constraint COMPILATIONS_PK_ID primary key (ID),
    constraint TITLE_UQ unique (TITLE)
);

Create table if not exists COMPILATION_EVENTS
(
    COMP_ID  bigint,
    EVENT_ID bigint,
    constraint COMPILATION_EVENTS_PK_ID primary key (COMP_ID, EVENT_ID),
    constraint COMPILATION_EVENTS_FK_COMP_ID foreign key (COMP_ID) references COMPILATIONS,
    constraint COMPILATION_EVENTS_FK_EVENT_ID foreign key (EVENT_ID) references EVENTS
);